{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNAR6AKwZv+VMSZssQG8vcJ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Ashishkumar07777/MLOPS_EXAM/blob/main/Mlops_exam\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VEWWX809suNr",
        "outputId": "74c52175-5c87-4cbc-8f85-f1791d6de7c2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 27481 entries, 0 to 27480\n",
            "Data columns (total 10 columns):\n",
            " #   Column            Non-Null Count  Dtype  \n",
            "---  ------            --------------  -----  \n",
            " 0   textID            27481 non-null  object \n",
            " 1   text              27480 non-null  object \n",
            " 2   selected_text     27480 non-null  object \n",
            " 3   sentiment         27481 non-null  object \n",
            " 4   Time of Tweet     27481 non-null  object \n",
            " 5   Age of User       27481 non-null  object \n",
            " 6   Country           27481 non-null  object \n",
            " 7   Population -2020  27481 non-null  int64  \n",
            " 8   Land Area (Km²)   27481 non-null  float64\n",
            " 9   Density (P/Km²)   27481 non-null  int64  \n",
            "dtypes: float64(1), int64(2), object(7)\n",
            "memory usage: 2.1+ MB\n",
            "Model Accuracy: 1.0\n",
            "Model saved to model.pkl\n",
            "Model Monitoring Accuracy: 1.0\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.0"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "import joblib\n",
        "from sklearn.datasets import load_iris\n",
        "# Load the train dataset from the uploaded file\n",
        "train_data = pd.read_csv(\"/content/train.csv\", encoding='latin1')\n",
        "\n",
        "# Display the first few rows to understand its structure\n",
        "train_data.head(), train_data.info()\n",
        "\n",
        "# Data ingestion\n",
        "def ingest_data():\n",
        "    iris_data = load_iris()\n",
        "    data = pd.DataFrame(data=iris_data.data, columns=iris_data.feature_names)\n",
        "    data['target'] = iris_data.target\n",
        "    return data\n",
        "\n",
        "# Feature engineering\n",
        "def engineer_features(data):\n",
        "    features = data.drop('target', axis=1)\n",
        "    target = data['target']\n",
        "    return features, target\n",
        "\n",
        "# Model training\n",
        "def train_model(features, target):\n",
        "    X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)\n",
        "    model = RandomForestClassifier(n_estimators=100)\n",
        "    model.fit(X_train, y_train)\n",
        "    predictions = model.predict(X_test)\n",
        "    print(f\"Model Accuracy: {accuracy_score(y_test, predictions)}\")\n",
        "    return model\n",
        "\n",
        "# Model deployment\n",
        "def deploy_model(model, model_path):\n",
        "    joblib.dump(model, model_path)\n",
        "    print(f\"Model saved to {model_path}\")\n",
        "\n",
        "# Model monitoring\n",
        "def monitor_model(model, features, target):\n",
        "    predictions = model.predict(features)\n",
        "    accuracy = accuracy_score(target, predictions)\n",
        "    print(f\"Model Monitoring Accuracy: {accuracy}\")\n",
        "    return accuracy\n",
        "\n",
        "# Example usage\n",
        "data = ingest_data()\n",
        "features, target = engineer_features(data)\n",
        "model = train_model(features, target)\n",
        "deploy_model(model, 'model.pkl')\n",
        "\n",
        "# Monitor model performance with new data (using the same dataset for simplicity)\n",
        "monitor_model(model, features, target)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load the datasets\n",
        "train_df = pd.read_csv('/content/train.csv', encoding='latin1')  # Use appropriate encoding if UTF-8 doesn't work\n",
        "test_df = pd.read_csv('/content/test.csv', encoding='latin1')\n",
        "\n",
        "# Display the first few rows\n",
        "print(train_df.head())\n",
        "print(test_df.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_ztmoVouzA14",
        "outputId": "d6922b95-cbb7-4e5a-c948-48d7c24ca768"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "       textID                                               text  \\\n",
            "0  cb774db0d1                I`d have responded, if I were going   \n",
            "1  549e992a42      Sooo SAD I will miss you here in San Diego!!!   \n",
            "2  088c60f138                          my boss is bullying me...   \n",
            "3  9642c003ef                     what interview! leave me alone   \n",
            "4  358bd9e861   Sons of ****, why couldn`t they put them on t...   \n",
            "\n",
            "                         selected_text sentiment Time of Tweet Age of User  \\\n",
            "0  I`d have responded, if I were going   neutral       morning        0-20   \n",
            "1                             Sooo SAD  negative          noon       21-30   \n",
            "2                          bullying me  negative         night       31-45   \n",
            "3                       leave me alone  negative       morning       46-60   \n",
            "4                        Sons of ****,  negative          noon       60-70   \n",
            "\n",
            "       Country  Population -2020  Land Area (Km²)  Density (P/Km²)  \n",
            "0  Afghanistan          38928346         652860.0               60  \n",
            "1      Albania           2877797          27400.0              105  \n",
            "2      Algeria          43851044        2381740.0               18  \n",
            "3      Andorra             77265            470.0              164  \n",
            "4       Angola          32866272        1246700.0               26  \n",
            "       textID                                               text sentiment  \\\n",
            "0  f87dea47db  Last session of the day  http://twitpic.com/67ezh   neutral   \n",
            "1  96d74cb729   Shanghai is also really exciting (precisely -...  positive   \n",
            "2  eee518ae67  Recession hit Veronique Branquinho, she has to...  negative   \n",
            "3  01082688c6                                        happy bday!  positive   \n",
            "4  33987a8ee5             http://twitpic.com/4w75p - I like it!!  positive   \n",
            "\n",
            "  Time of Tweet Age of User      Country  Population -2020  Land Area (Km²)  \\\n",
            "0       morning        0-20  Afghanistan        38928346.0         652860.0   \n",
            "1          noon       21-30      Albania         2877797.0          27400.0   \n",
            "2         night       31-45      Algeria        43851044.0        2381740.0   \n",
            "3       morning       46-60      Andorra           77265.0            470.0   \n",
            "4          noon       60-70       Angola        32866272.0        1246700.0   \n",
            "\n",
            "   Density (P/Km²)  \n",
            "0             60.0  \n",
            "1            105.0  \n",
            "2             18.0  \n",
            "3            164.0  \n",
            "4             26.0  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# General information about the datasets\n",
        "print(train_df.info())\n",
        "print(test_df.info())\n",
        "\n",
        "# Check for missing values\n",
        "print(train_df.isnull().sum())\n",
        "print(test_df.isnull().sum())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8jahcSCqzj18",
        "outputId": "7f9740c4-b36f-496c-d759-a59bb835d3c6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 27481 entries, 0 to 27480\n",
            "Data columns (total 10 columns):\n",
            " #   Column            Non-Null Count  Dtype  \n",
            "---  ------            --------------  -----  \n",
            " 0   textID            27481 non-null  object \n",
            " 1   text              27480 non-null  object \n",
            " 2   selected_text     27480 non-null  object \n",
            " 3   sentiment         27481 non-null  object \n",
            " 4   Time of Tweet     27481 non-null  object \n",
            " 5   Age of User       27481 non-null  object \n",
            " 6   Country           27481 non-null  object \n",
            " 7   Population -2020  27481 non-null  int64  \n",
            " 8   Land Area (Km²)   27481 non-null  float64\n",
            " 9   Density (P/Km²)   27481 non-null  int64  \n",
            "dtypes: float64(1), int64(2), object(7)\n",
            "memory usage: 2.1+ MB\n",
            "None\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 4815 entries, 0 to 4814\n",
            "Data columns (total 9 columns):\n",
            " #   Column            Non-Null Count  Dtype  \n",
            "---  ------            --------------  -----  \n",
            " 0   textID            3534 non-null   object \n",
            " 1   text              3534 non-null   object \n",
            " 2   sentiment         3534 non-null   object \n",
            " 3   Time of Tweet     3534 non-null   object \n",
            " 4   Age of User       3534 non-null   object \n",
            " 5   Country           3534 non-null   object \n",
            " 6   Population -2020  3534 non-null   float64\n",
            " 7   Land Area (Km²)   3534 non-null   float64\n",
            " 8   Density (P/Km²)   3534 non-null   float64\n",
            "dtypes: float64(3), object(6)\n",
            "memory usage: 338.7+ KB\n",
            "None\n",
            "textID              0\n",
            "text                1\n",
            "selected_text       1\n",
            "sentiment           0\n",
            "Time of Tweet       0\n",
            "Age of User         0\n",
            "Country             0\n",
            "Population -2020    0\n",
            "Land Area (Km²)     0\n",
            "Density (P/Km²)     0\n",
            "dtype: int64\n",
            "textID              1281\n",
            "text                1281\n",
            "sentiment           1281\n",
            "Time of Tweet       1281\n",
            "Age of User         1281\n",
            "Country             1281\n",
            "Population -2020    1281\n",
            "Land Area (Km²)     1281\n",
            "Density (P/Km²)     1281\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Summary statistics\n",
        "print(train_df.describe(include='all'))\n",
        "print(test_df.describe(include='all'))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qWH1STA6z2Gu",
        "outputId": "d0281675-6f1e-46f3-c591-330c0f11dc1d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "            textID                                  text selected_text  \\\n",
            "count        27481                                 27480         27480   \n",
            "unique       27481                                 27480         22430   \n",
            "top     cb774db0d1   I`d have responded, if I were going          good   \n",
            "freq             1                                     1           199   \n",
            "mean           NaN                                   NaN           NaN   \n",
            "std            NaN                                   NaN           NaN   \n",
            "min            NaN                                   NaN           NaN   \n",
            "25%            NaN                                   NaN           NaN   \n",
            "50%            NaN                                   NaN           NaN   \n",
            "75%            NaN                                   NaN           NaN   \n",
            "max            NaN                                   NaN           NaN   \n",
            "\n",
            "       sentiment Time of Tweet Age of User      Country  Population -2020  \\\n",
            "count      27481         27481       27481        27481      2.748100e+04   \n",
            "unique         3             3           6          195               NaN   \n",
            "top      neutral       morning        0-20  Afghanistan               NaN   \n",
            "freq       11118          9161        4581          149               NaN   \n",
            "mean         NaN           NaN         NaN          NaN      4.018497e+07   \n",
            "std          NaN           NaN         NaN          NaN      1.504946e+08   \n",
            "min          NaN           NaN         NaN          NaN      8.010000e+02   \n",
            "25%          NaN           NaN         NaN          NaN      1.968001e+06   \n",
            "50%          NaN           NaN         NaN          NaN      8.655535e+06   \n",
            "75%          NaN           NaN         NaN          NaN      2.843594e+07   \n",
            "max          NaN           NaN         NaN          NaN      1.439324e+09   \n",
            "\n",
            "        Land Area (Km²)  Density (P/Km²)  \n",
            "count      2.748100e+04     27481.000000  \n",
            "unique              NaN              NaN  \n",
            "top                 NaN              NaN  \n",
            "freq                NaN              NaN  \n",
            "mean       6.621730e+05       357.686583  \n",
            "std        1.807425e+06      2013.750702  \n",
            "min        0.000000e+00         2.000000  \n",
            "25%        2.281000e+04        35.000000  \n",
            "50%        1.118900e+05        89.000000  \n",
            "75%        5.279700e+05       214.000000  \n",
            "max        1.637687e+07     26337.000000  \n",
            "            textID                                               text  \\\n",
            "count         3534                                               3534   \n",
            "unique        3534                                               3534   \n",
            "top     f87dea47db  Last session of the day  http://twitpic.com/67ezh   \n",
            "freq             1                                                  1   \n",
            "mean           NaN                                                NaN   \n",
            "std            NaN                                                NaN   \n",
            "min            NaN                                                NaN   \n",
            "25%            NaN                                                NaN   \n",
            "50%            NaN                                                NaN   \n",
            "75%            NaN                                                NaN   \n",
            "max            NaN                                                NaN   \n",
            "\n",
            "       sentiment Time of Tweet Age of User      Country  Population -2020  \\\n",
            "count       3534          3534        3534         3534      3.534000e+03   \n",
            "unique         3             3           6          195               NaN   \n",
            "top      neutral       morning        0-20  Afghanistan               NaN   \n",
            "freq        1430          1178         590           20               NaN   \n",
            "mean         NaN           NaN         NaN          NaN      3.941891e+07   \n",
            "std          NaN           NaN         NaN          NaN      1.468757e+08   \n",
            "min          NaN           NaN         NaN          NaN      8.010000e+02   \n",
            "25%          NaN           NaN         NaN          NaN      1.968001e+06   \n",
            "50%          NaN           NaN         NaN          NaN      8.696453e+06   \n",
            "75%          NaN           NaN         NaN          NaN      2.843594e+07   \n",
            "max          NaN           NaN         NaN          NaN      1.439324e+09   \n",
            "\n",
            "        Land Area (Km²)  Density (P/Km²)  \n",
            "count      3.534000e+03      3534.000000  \n",
            "unique              NaN              NaN  \n",
            "top                 NaN              NaN  \n",
            "freq                NaN              NaN  \n",
            "mean       6.722499e+05       348.894171  \n",
            "std        1.839134e+06      1967.012367  \n",
            "min        0.000000e+00         2.000000  \n",
            "25%        2.281000e+04        35.000000  \n",
            "50%        1.127600e+05        87.000000  \n",
            "75%        5.279700e+05       214.000000  \n",
            "max        1.637687e+07     26337.000000  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "print(train_df.duplicated().sum())\n",
        "\n",
        "train_df = train_df.drop_duplicates()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mikJ_Waw0D36",
        "outputId": "47b44ccd-f958-4d60-d00a-02422370bab1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Fill or drop missing values\n",
        "train_df = train_df.fillna(method='ffill')  # Forward fill example\n",
        "# OR\n",
        "train_df = train_df.dropna()  # Drop rows with missing values\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h_vrpicP0fBq",
        "outputId": "6ae49f81-1501-4ae7-c573-5ba2ad3fbe83"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-9-7f60cd32f802>:2: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n",
            "  train_df = train_df.fillna(method='ffill')  # Forward fill example\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install matplotlib seaborn\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EvGpUrOg0rhM",
        "outputId": "2d0226b9-78d9-4782-8fec-30e068088ba7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (3.8.0)\n",
            "Requirement already satisfied: seaborn in /usr/local/lib/python3.10/dist-packages (0.13.2)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.3.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (4.55.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.4.7)\n",
            "Requirement already satisfied: numpy<2,>=1.21 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.26.4)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (24.2)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (11.0.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (3.2.0)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (2.8.2)\n",
            "Requirement already satisfied: pandas>=1.2 in /usr/local/lib/python3.10/dist-packages (from seaborn) (2.2.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.2->seaborn) (2024.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.2->seaborn) (2024.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Correlation heatmap\n",
        "plt.figure(figsize=(10, 8))\n",
        "# Calculate correlation for numeric columns only\n",
        "sns.heatmap(train_df.select_dtypes(include=['number']).corr(), annot=True, cmap='coolwarm')\n",
        "plt.show()\n",
        "\n",
        "# Distribution of numerical columns\n",
        "train_df.hist(figsize=(12, 10), bins=20)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "S_koQG7U0uHp",
        "outputId": "00f25db8-4afd-4567-e765-48751b31d1ad"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x1000 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Importing necessary libraries\n",
        "import pandas as pd\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout\n",
        "from tensorflow.keras.preprocessing.text import Tokenizer\n",
        "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "import matplotlib.pyplot as plt\n"
      ],
      "metadata": {
        "id": "u9vYgaQV56d8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_data = pd.read_csv('/content/train.csv', encoding='latin1')\n",
        "test_data = pd.read_csv('/content/test.csv', encoding='latin1')"
      ],
      "metadata": {
        "id": "CHTuYX8Z59LS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X = train_data['text'].fillna('')  # Fill missing values with empty string\n",
        "y = train_data['sentiment']"
      ],
      "metadata": {
        "id": "wSNe2hxd6A4z"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X = X.astype(str)"
      ],
      "metadata": {
        "id": "yxkaGQuX6HwX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "allowed_sentiments = ['neutral', 'negative', 'positive']\n",
        "train_data = train_data[train_data['sentiment'].isin(allowed_sentiments)]\n",
        "X = train_data['text']\n",
        "y = train_data['sentiment']"
      ],
      "metadata": {
        "id": "une1L8k16LD7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "label_encoder = LabelEncoder()\n",
        "y_encoded = label_encoder.fit_transform(y)"
      ],
      "metadata": {
        "id": "tTT_wtPQ6OOB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install pandas\n",
        "!pip install tensorflow\n",
        "\n",
        "import pandas as pd\n",
        "from tensorflow.keras.preprocessing.text import Tokenizer\n",
        "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "\n",
        "# Assuming 'train_data' is your DataFrame\n",
        "# ... (your code to load train_data) ...\n",
        "\n",
        "# Convert the 'text' column to string type to ensure all values are strings\n",
        "train_data['text'] = train_data['text'].astype(str)\n",
        "\n",
        "# Fill any potential NaN values after type conversion.\n",
        "X = train_data['text'].fillna('')\n",
        "\n",
        "# Rest of your code\n",
        "allowed_sentiments = ['neutral', 'negative', 'positive']\n",
        "train_data = train_data[train_data['sentiment'].isin(allowed_sentiments)]\n",
        "X = train_data['text']  # Update X with the filtered DataFrame\n",
        "y = train_data['sentiment']\n",
        "\n",
        "label_encoder = LabelEncoder()\n",
        "y_encoded = label_encoder.fit_transform(y)\n",
        "\n",
        "max_words = 5000  # Vocabulary size\n",
        "max_len = 100     # Max sentence length\n",
        "tokenizer = Tokenizer(num_words=max_words, lower=True)\n",
        "\n",
        "# This line should now work without errors since 'X' contains only strings\n",
        "tokenizer.fit_on_texts(X)\n",
        "\n",
        "X_seq = tokenizer.texts_to_sequences(X)\n",
        "X_pad = pad_sequences(X_seq, maxlen=max_len)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sNBQbcQn6RNp",
        "outputId": "d623b28f-e7ef-41ee-8ec3-9fae9ba8b4a3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.2.2)\n",
            "Requirement already satisfied: numpy>=1.22.4 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.26.4)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n",
            "Requirement already satisfied: tensorflow in /usr/local/lib/python3.10/dist-packages (2.17.1)\n",
            "Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.4.0)\n",
            "Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.6.3)\n",
            "Requirement already satisfied: flatbuffers>=24.3.25 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (24.3.25)\n",
            "Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.6.0)\n",
            "Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.2.0)\n",
            "Requirement already satisfied: h5py>=3.10.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.12.1)\n",
            "Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (18.1.1)\n",
            "Requirement already satisfied: ml-dtypes<0.5.0,>=0.3.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.4.1)\n",
            "Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.4.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from tensorflow) (24.2)\n",
            "Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (4.25.5)\n",
            "Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.32.3)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from tensorflow) (75.1.0)\n",
            "Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.16.0)\n",
            "Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.5.0)\n",
            "Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (4.12.2)\n",
            "Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.16.0)\n",
            "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.68.0)\n",
            "Requirement already satisfied: tensorboard<2.18,>=2.17 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.17.1)\n",
            "Requirement already satisfied: keras>=3.2.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.5.0)\n",
            "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.37.1)\n",
            "Requirement already satisfied: numpy<2.0.0,>=1.23.5 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.26.4)\n",
            "Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from astunparse>=1.6.0->tensorflow) (0.45.0)\n",
            "Requirement already satisfied: rich in /usr/local/lib/python3.10/dist-packages (from keras>=3.2.0->tensorflow) (13.9.4)\n",
            "Requirement already satisfied: namex in /usr/local/lib/python3.10/dist-packages (from keras>=3.2.0->tensorflow) (0.0.8)\n",
            "Requirement already satisfied: optree in /usr/local/lib/python3.10/dist-packages (from keras>=3.2.0->tensorflow) (0.13.1)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorflow) (3.4.0)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorflow) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorflow) (2.2.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorflow) (2024.8.30)\n",
            "Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.18,>=2.17->tensorflow) (3.7)\n",
            "Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.18,>=2.17->tensorflow) (0.7.2)\n",
            "Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.18,>=2.17->tensorflow) (3.1.3)\n",
            "Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.10/dist-packages (from werkzeug>=1.0.1->tensorboard<2.18,>=2.17->tensorflow) (3.0.2)\n",
            "Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from rich->keras>=3.2.0->tensorflow) (3.0.0)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from rich->keras>=3.2.0->tensorflow) (2.18.0)\n",
            "Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.10/dist-packages (from markdown-it-py>=2.2.0->rich->keras>=3.2.0->tensorflow) (0.1.2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "label_encoder = LabelEncoder()\n",
        "y_encoded = label_encoder.fit_transform(y)"
      ],
      "metadata": {
        "id": "EDuLlI7J6r9Q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "max_words = 5000  # Vocabulary size\n",
        "max_len = 100     # Max sentence length\n",
        "tokenizer = Tokenizer(num_words=max_words, lower=True)\n",
        "tokenizer.fit_on_texts(X)\n",
        "X_seq = tokenizer.texts_to_sequences(X)\n",
        "X_pad = pad_sequences(X_seq, maxlen=max_len)"
      ],
      "metadata": {
        "id": "ycr3RAtv62F9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_val, y_train, y_val = train_test_split(\n",
        "    X_pad, y_encoded, test_size=0.2, random_state=42, stratify=y_encoded\n",
        ")"
      ],
      "metadata": {
        "id": "7uoW7yuD7Eyu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = Sequential([\n",
        "    Embedding(input_dim=max_words, output_dim=128, input_length=max_len),\n",
        "    LSTM(64, dropout=0.2, recurrent_dropout=0.2),\n",
        "    Dense(3, activation='softmax')  # Output layer for 3 classes (neutral, negative, positive)\n",
        "])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tciHzDSH7JBx",
        "outputId": "4eec01c2-7b9a-413d-9cb0-03259789226f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/core/embedding.py:90: UserWarning: Argument `input_length` is deprecated. Just remove it.\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.compile(\n",
        "    loss='sparse_categorical_crossentropy',\n",
        "    optimizer='adam',\n",
        "    metrics=['accuracy']\n",
        ")\n"
      ],
      "metadata": {
        "id": "HoJanTyV7PN1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "history = model.fit(\n",
        "    X_train, y_train,\n",
        "    epochs=5,\n",
        "    batch_size=64,\n",
        "    validation_data=(X_val, y_val),\n",
        "    verbose=2\n",
        ")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Nfqui6nD7VKs",
        "outputId": "90489559-de84-43e5-aa24-c09a8322a55d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5\n",
            "344/344 - 57s - 167ms/step - accuracy: 0.5978 - loss: 0.8551 - val_accuracy: 0.6946 - val_loss: 0.7150\n",
            "Epoch 2/5\n",
            "344/344 - 52s - 152ms/step - accuracy: 0.7351 - loss: 0.6381 - val_accuracy: 0.7173 - val_loss: 0.6755\n",
            "Epoch 3/5\n",
            "344/344 - 56s - 163ms/step - accuracy: 0.7773 - loss: 0.5591 - val_accuracy: 0.7155 - val_loss: 0.6834\n",
            "Epoch 4/5\n",
            "344/344 - 80s - 232ms/step - accuracy: 0.7991 - loss: 0.5095 - val_accuracy: 0.7155 - val_loss: 0.6942\n",
            "Epoch 5/5\n",
            "344/344 - 72s - 208ms/step - accuracy: 0.8168 - loss: 0.4689 - val_accuracy: 0.7037 - val_loss: 0.7345\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "val_loss, val_accuracy = model.evaluate(X_val, y_val, verbose=0)\n",
        "print(f\"Validation Accuracy: {val_accuracy * 100:.2f}%\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "z_daSC9d7zfr",
        "outputId": "e8610def-ea7b-4f5a-848c-c740b764b252"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation Accuracy: 70.37%\n"
          ]
        }
      ]
    }
  ]
}